#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'


require "bcdice/arithmetic/node"
require "bcdice/command/lexer"
require "bcdice/command/parsed"

# よくある形式のコマンドのパースを補助するクラス
#
# @example Literal by String
#   parser = Command::Parser.new("MC", round_type: BCDice::RoundType::FLOOR)
#                           .enable_critical
#   parsed = parser.parse("MC+2*3@30<=10/2-3") #=> <Command::Parsed>
#
#   parsed.command #=> "MC"
#   parsed.modify_number #=> 6
#   parsed.critical #=> 30
#   parsed.cmp_op #=> #>=
#   parsed.target_number #=> 2
#
# @example Literal by Regexp
#   parser = Command::Parser.new(/RE\d+/)
#   parsed = parser.parse("RE44+20") #=> <Command::Parsed>
#
#   parsed.command #=> "RE44"
#   parsed.modify_number #=> 20
class BCDice::Command::Parser < Racc::Parser; end

module BCDice
  module Command
    class Parser < Racc::Parser


# @param notations [Array<String, Regexp>] 反応するコマンドの表記
# @param round_type [Symbol] 除算での端数の扱い
def initialize(*notations, round_type:)
  super()
  @notations = notations
  @round_type = round_type
  @prefix_number = false
  @suffix_number = false
  @need_prefix_number = false
  @need_suffix_number = false
  @modifier = true
  @critical = false
  @fumble = false
  @dollar = false
  @allowed_cmp_op = [nil, :>=, :>, :<=, :<, :==, :!=]
  @question_target = false
end

# 修正値は受け付けないようにする
# @return [BCDice::Command::Parser]
def disable_modifier
  @modifier = false
  self
end

# リテラルの前に数値を許可する
# @return [BCDice::Command::Parser]
def enable_prefix_number
  @prefix_number = true
  self
end

# リテラルの後ろに数値を許可する
# @return [BCDice::Command::Parser]
def enable_suffix_number
  @suffix_number = true
  self
end

# リテラルの前に数値が必要であると設定する
# @return [BCDice::Command::Parser]
def has_prefix_number
  @prefix_number = true
  @need_prefix_number = true
  self
end

# リテラルの後ろに数値が必要であると設定する
# @return [BCDice::Command::Parser]
def has_suffix_number
  @suffix_number = true
  @need_suffix_number = true
  self
end

# +@+によるクリティカル値の指定を許可する
# @return [BCDice::Command::Parser]
def enable_critical
  @critical = true
  self
end

# +#+によるファンブル値の指定を許可する
# @return [BCDice::Command::Parser]
def enable_fumble
  @fumble = true
  self
end

# +$+による値の指定を許可する
# @return [BCDice::Command::Parser]
def enable_dollar
  @dollar = true
  self
end

# 使用できる比較演算子を制限する。
# 目標値未入力を許可する場合には+nil+を指定する。
# @param ops [Array<nil, Symbol>] 許可する比較演算子の一覧
# @return [BCDice::Command::Parser]
def restrict_cmp_op_to(*ops)
  @allowed_cmp_op = ops
  self
end

# 目標値"?"の指定を許可する
# @return [BCDice::Command::Parser]
def enable_question_target
  @question_target = true
  self
end

# @param source [String]
# @return [BCDice::Command::Parsed, nil]
def parse(source)
  @lexer = Lexer.new(source, @notations)
  do_parse()
rescue ParseError, ZeroDivisionError
  nil
end

private

def parsed(notation, option, modifier, target)
  Parsed.new.tap do |p|
    p.command = notation[:command]
    p.prefix_number = notation[:prefix]&.eval(@round_type)
    p.suffix_number = notation[:suffix]&.eval(@round_type)
    p.critical = option[:critical]&.eval(@round_type)
    p.fumble = option[:fumble]&.eval(@round_type)
    p.dollar = option[:dollar]&.eval(@round_type)
    p.modify_number = modifier.eval(@round_type)
    p.cmp_op = target[:cmp_op]
    if target[:target] == "?"
      p.question_target = true
      p.target_number = 0
    else
      p.question_target = false
      p.target_number = target[:target]&.eval(@round_type)
    end
  end
end

def next_token
  @lexer.next_token
end
##### State transition tables begin ###

racc_action_table = [
     6,     6,     6,     6,     7,    28,    29,    17,    18,     5,
     5,     5,     5,     6,    26,    12,     4,    45,    17,    18,
    10,    11,     5,    10,    11,     6,    23,    24,    25,    26,
    17,    18,     6,    20,     5,    33,    34,    17,    18,     6,
    35,     5,    28,    29,    17,    18,     6,   nil,     5,    36,
    37,    17,    18,     6,   nil,     5,    36,    37,    17,    18,
     6,   nil,     5,    36,    37,    17,    18,     6,   nil,     5,
    33,    34,    17,    18,     6,   nil,     5,    36,    37,    17,
    18,     6,   nil,     5,    36,    37,    17,    18,     6,   nil,
     5,    36,    37,    17,    18,     6,   nil,     5,    36,    37,
    17,    18,     6,   nil,     5,   nil,   nil,    17,    18,     6,
   nil,     5,   nil,   nil,    17,    18,   nil,   nil,     5,    23,
    24,    25,    26,    56,    54,    55,    57 ]

racc_action_check = [
     0,     4,    26,    12,     1,    21,    21,    26,    26,     0,
     4,    26,    12,     5,    21,     3,     0,    26,     5,     5,
     8,     8,     5,     2,     2,    10,     8,     8,     8,     8,
    10,    10,    11,     7,    10,    14,    14,    11,    11,    17,
    14,    11,     9,     9,    17,    17,    18,   nil,    17,    15,
    15,    18,    18,    23,   nil,    18,    30,    30,    23,    23,
    24,   nil,    23,    31,    31,    24,    24,    25,   nil,    24,
    44,    44,    25,    25,    28,   nil,    25,    47,    47,    28,
    28,    29,   nil,    28,    48,    48,    29,    29,    33,   nil,
    29,    49,    49,    33,    33,    34,   nil,    33,    50,    50,
    34,    34,    36,   nil,    34,   nil,   nil,    36,    36,    37,
   nil,    36,   nil,   nil,    37,    37,   nil,   nil,    37,    27,
    27,    27,    27,    52,    52,    52,    52 ]

racc_action_pointer = [
    -2,     4,    16,    -3,    -1,    11,   nil,    33,    13,    35,
    23,    30,     1,   nil,    28,    40,   nil,    37,    44,   nil,
   nil,    -2,   nil,    51,    58,    65,     0,   106,    72,    79,
    47,    54,   nil,    86,    93,   nil,   100,   107,   nil,   nil,
   nil,   nil,   nil,   nil,    63,   nil,   nil,    68,    75,    82,
    89,   nil,   120,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -35,   -35,    -8,   -35,    -7,   -35,   -34,   -35,   -16,    -8,
   -35,   -35,    -5,    -6,   -35,   -21,   -24,   -35,   -35,   -32,
    58,   -16,    -3,   -35,   -35,   -35,   -35,   -16,   -35,   -35,
   -12,   -13,    -4,   -35,   -35,   -33,   -35,   -35,   -30,   -31,
    -1,    -9,   -10,   -11,   -17,   -18,    -2,   -14,   -15,   -19,
   -20,   -22,   -25,   -23,   -26,   -27,   -28,   -29 ]

racc_goto_table = [
    30,    31,    38,    39,    14,     8,     1,    22,    41,    42,
    43,     9,    27,     2,    53,   nil,   nil,    21,    47,    48,
    40,    51,    52,    49,    50,    44,    46,     3,   nil,   nil,
   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    32 ]

racc_goto_check = [
     8,     8,     7,     7,     9,     3,     1,     5,     7,     7,
     7,     4,     3,     2,    10,   nil,   nil,     4,     8,     8,
     5,     7,     7,     8,     8,     9,     5,     6,   nil,   nil,
   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6 ]

racc_goto_pointer = [
   nil,     6,    13,     3,     9,    -1,    27,   -15,   -10,    -1,
   -38 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,    19,    16,    15,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 20, :_reduce_1,
  4, 20, :_reduce_2,
  3, 20, :_reduce_3,
  3, 21, :_reduce_4,
  2, 21, :_reduce_5,
  2, 21, :_reduce_6,
  1, 21, :_reduce_7,
  0, 22, :_reduce_8,
  3, 22, :_reduce_9,
  3, 22, :_reduce_10,
  3, 22, :_reduce_11,
  2, 23, :_reduce_12,
  2, 23, :_reduce_13,
  3, 23, :_reduce_14,
  3, 23, :_reduce_15,
  0, 24, :_reduce_16,
  2, 24, :_reduce_17,
  2, 24, :_reduce_18,
  3, 28, :_reduce_19,
  3, 28, :_reduce_20,
  1, 28, :_reduce_none,
  3, 27, :_reduce_22,
  4, 27, :_reduce_23,
  1, 27, :_reduce_none,
  0, 29, :_reduce_25,
  1, 29, :_reduce_26,
  1, 29, :_reduce_27,
  1, 29, :_reduce_28,
  1, 29, :_reduce_29,
  2, 26, :_reduce_30,
  2, 26, :_reduce_31,
  1, 26, :_reduce_none,
  3, 25, :_reduce_33,
  1, 25, :_reduce_34 ]

racc_reduce_n = 35

racc_shift_n = 58

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :R => 3,
  :U => 4,
  :C => 5,
  :F => 6,
  :PLUS => 7,
  :MINUS => 8,
  :ASTERISK => 9,
  :SLASH => 10,
  :PARENL => 11,
  :PARENR => 12,
  :AT => 13,
  :SHARP => 14,
  :DOLLAR => 15,
  :CMP_OP => 16,
  :QUESTION => 17,
  :NOTATION => 18 }

racc_nt_base = 19

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "R",
  "U",
  "C",
  "F",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "AT",
  "SHARP",
  "DOLLAR",
  "CMP_OP",
  "QUESTION",
  "NOTATION",
  "$start",
  "expr",
  "notation",
  "option",
  "modifier",
  "target",
  "term",
  "unary",
  "mul",
  "add",
  "round_type" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
          raise ParseError unless @modifier
          notation, option, modifier, target = val
          result = parsed(notation, option, modifier, target)

    result
end

def _reduce_2(val, _values, result)
          raise ParseError unless @modifier
          notation, modifier, option, target = val
          result = parsed(notation, option, modifier, target)

    result
end

def _reduce_3(val, _values, result)
          notation, option, target = val
          result = parsed(notation, option,  Arithmetic::Node::Number.new(0), target)

    result
end

def _reduce_4(val, _values, result)
              raise ParseError unless @prefix_number && @suffix_number
              result = { command: val[1], prefix: val[0], suffix: val[2] }

    result
end

def _reduce_5(val, _values, result)
              raise ParseError unless @prefix_number
              raise ParseError if @need_suffix_number
              result = { command: val[1], prefix: val[0] }

    result
end

def _reduce_6(val, _values, result)
              raise ParseError unless @suffix_number
              raise ParseError if @need_prefix_number
              result = { command: val[0], suffix: val[1] }

    result
end

def _reduce_7(val, _values, result)
              raise ParseError if @need_prefix_number || @need_suffix_number
              result = { command: val[0] }

    result
end

def _reduce_8(val, _values, result)
            result = {}

    result
end

def _reduce_9(val, _values, result)
            option, _, term = val
            raise ParseError unless @critical && option[:critical].nil?

            option[:critical] = term
            result = option

    result
end

def _reduce_10(val, _values, result)
            option, _, term = val
            raise ParseError unless @fumble && option[:fumble].nil?

            option[:fumble] = term
            result = option

    result
end

def _reduce_11(val, _values, result)
            option, _, term = val
            raise ParseError unless @dollar && option[:dollar].nil?

            option[:dollar] = term
            result = option

    result
end

def _reduce_12(val, _values, result)
 result = val[1]
    result
end

def _reduce_13(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

def _reduce_14(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_15(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

def _reduce_16(val, _values, result)
            raise ParseError unless @allowed_cmp_op.include?(nil)
            result = {}

    result
end

def _reduce_17(val, _values, result)
            cmp_op, target = val
            raise ParseError unless @allowed_cmp_op.include?(cmp_op)

            result = {cmp_op: cmp_op, target: target}

    result
end

def _reduce_18(val, _values, result)
            cmp_op = val[0]
            raise ParseError unless @question_target
            raise ParseError unless @allowed_cmp_op.include?(cmp_op)

            result = {cmp_op: cmp_op, target: "?"}

    result
end

def _reduce_19(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_20(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

# reduce 21 omitted

def _reduce_22(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])
    result
end

def _reduce_23(val, _values, result)
         divied_class = val[3]
         result = divied_class.new(val[0], val[2])

    result
end

# reduce 24 omitted

def _reduce_25(val, _values, result)
 result = Arithmetic::Node::DivideWithGameSystemDefault
    result
end

def _reduce_26(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_27(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_28(val, _values, result)
 result = Arithmetic::Node::DivideWithRound
    result
end

def _reduce_29(val, _values, result)
 result = Arithmetic::Node::DivideWithFloor
    result
end

def _reduce_30(val, _values, result)
 result = val[1]
    result
end

def _reduce_31(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

# reduce 32 omitted

def _reduce_33(val, _values, result)
 result = val[1]
    result
end

def _reduce_34(val, _values, result)
 result = Arithmetic::Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
  end   # module Command
end   # module BCDice
