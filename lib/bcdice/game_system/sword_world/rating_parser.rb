#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "rating_parser.y".
#

require 'racc/parser.rb'


require "bcdice/arithmetic/node"
require "bcdice/enum"
require "bcdice/game_system/sword_world/rating_lexer"
require "bcdice/game_system/sword_world/rating_parsed"
require "bcdice/game_system/sword_world/rating_options"

module BCDice
  module GameSystem
    class SwordWorld < Base
    # SwordWorldの威力表コマンドをパースするクラス

class RatingParser < Racc::Parser


# デフォルトの丸めを切り上げとしているが、SwordWorldには切り捨てもあるので決め切れない（四捨五入は現状ない）
def initialize(version: :v1_0, round_type: RoundType::CEIL)
  super()
  @version = version
  @round_type = round_type
end

def set_debug
  @yydebug = true
  return self
end

# @param source [String]
# @return [BCDice::GameSystem::SwordWorld::RatingParsed, nil]
def parse(source)
  @lexer = RatingLexer.new(source)
  do_parse()
rescue ParseError, ZeroDivisionError
  nil
end

private

def parsed(rate, modifier, option)
  RatingParsed.new(rate, modifier).tap do |p|
    p.kept_modify = option.kept_modify&.eval(@round_type) || 0
    p.first_to = option.first_to || 0
    p.first_modify = option.first_modify || 0
    p.first_modify_ssp = option.first_modify_ssp || 0
    p.rateup = option.rateup&.eval(@round_type) || 0
    p.greatest_fortune = option.greatest_fortune if !option.greatest_fortune.nil?
    p.semi_fixed_val = option.semi_fixed_val&.clamp(1, 6) || 0
    p.tmp_fixed_val = option.tmp_fixed_val&.clamp(1, 6) || 0
    p.modifier_after_half = option.modifier_after_half&.eval(@round_type)
    p.modifier_after_one_and_a_half = option.modifier_after_one_and_a_half&.eval(@round_type)
    p.critical = option.critical&.eval(@round_type)&.clamp(0, 13) || (p.half || p.one_and_a_half ? 13 : 10)
  end
end

def next_token
  @lexer.next_token
end

##### State transition tables begin ###

racc_action_table = [
    36,    66,    67,    27,    28,     5,    68,     3,     4,    37,
    38,    18,    16,    17,    19,     6,    20,    21,    23,    24,
    39,    64,    65,     5,    13,     9,    14,    22,    15,    18,
    16,    17,    19,    10,    20,    21,    23,    24,    64,    65,
    64,    65,    13,    11,    14,    22,    15,    18,    16,    17,
    19,     5,    20,    21,    23,    24,    34,    41,    34,    43,
    13,    44,    14,    22,    15,    30,    31,    30,    31,    33,
    34,    33,    34,    64,    65,    64,    65,    34,    45,    30,
    31,    30,    31,    33,    34,    33,    30,    31,    53,    34,
    33,    34,    58,    30,    31,    59,    34,    33,    30,    31,
    30,    31,    33,    34,    33,    30,    31,    60,    34,    33,
    34,    62,    30,    31,    63,    34,    33,    30,    31,    30,
    31,    33,    34,    33,    30,    31,    69,    34,    33,    34,
   nil,    30,    31,   nil,    34,    33,    30,    31,    30,    31,
    33,   nil,    33,    30,    31,    64,    65,    33,    64,    65 ]

racc_action_check = [
    15,    56,    56,    12,    12,     0,    56,     0,     0,    15,
    15,     7,     7,     7,     7,     1,     7,     7,     7,     7,
    15,    47,    47,     3,     7,     4,     7,     7,     7,    25,
    25,    25,    25,     5,    25,    25,    25,    25,    49,    49,
    51,    51,    25,     6,    25,    25,    25,    50,    50,    50,
    50,     9,    50,    50,    50,    50,    13,    17,    14,    19,
    50,    20,    50,    50,    50,    13,    13,    14,    14,    13,
    16,    14,    18,    52,    52,    57,    57,    22,    21,    16,
    16,    18,    18,    16,    23,    18,    22,    22,    29,    24,
    22,    27,    37,    23,    23,    38,    28,    23,    24,    24,
    27,    27,    24,    30,    27,    28,    28,    39,    31,    28,
    33,    44,    30,    30,    45,    41,    30,    31,    31,    33,
    33,    31,    64,    33,    41,    41,    60,    65,    41,    66,
   nil,    64,    64,   nil,    67,    64,    65,    65,    66,    66,
    65,   nil,    66,    67,    67,    72,    72,    67,    73,    73 ]

racc_action_pointer = [
     2,    15,   nil,    20,    20,    31,    43,     7,   nil,    48,
   nil,   nil,    -8,    54,    56,    -2,    68,    52,    70,    51,
    53,    70,    75,    82,    87,    25,   nil,    89,    94,    70,
   101,   106,   nil,   108,   nil,   nil,   nil,    90,    93,    96,
   nil,   113,   nil,   nil,   109,   112,   nil,     8,   nil,    25,
    43,    27,    60,   nil,   nil,   nil,   -10,    62,   nil,   nil,
   124,   nil,   nil,   nil,   120,   125,   127,   132,   nil,   nil,
   nil,   nil,   132,   135 ]

racc_action_default = [
   -37,   -37,    -5,   -37,   -37,   -37,   -37,    -1,    -5,   -37,
    -4,    74,    -6,   -37,   -37,   -37,   -13,   -37,   -37,   -37,
   -37,   -37,   -37,   -37,   -37,    -2,    -5,   -37,   -37,   -37,
   -37,   -37,   -34,   -37,   -36,    -8,    -9,   -37,   -37,   -37,
   -14,   -15,   -17,   -18,   -37,   -37,   -21,   -22,   -31,   -23,
    -3,   -24,   -25,    -7,   -32,   -33,   -37,   -28,   -10,   -11,
   -37,   -16,   -19,   -20,   -37,   -37,   -37,   -37,   -35,   -12,
   -29,   -30,   -26,   -27 ]

racc_goto_table = [
    29,    35,     7,    40,     1,    42,    47,    49,    25,    46,
    51,    52,     2,    56,   nil,     8,    57,    54,    55,   nil,
   nil,    26,   nil,   nil,   nil,   nil,    50,   nil,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    72,
    73,    70,    71 ]

racc_goto_check = [
     5,     5,     3,     5,     1,     5,     6,     6,     3,     5,
     6,     6,     2,     7,   nil,     2,     6,     5,     5,   nil,
   nil,     2,   nil,   nil,   nil,   nil,     3,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
     6,     5,     5 ]

racc_goto_pointer = [
   nil,     4,    12,     0,   nil,   -13,   -17,   -20,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    12,    48,   nil,   nil,    32 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 24, :_reduce_1,
  3, 24, :_reduce_2,
  4, 24, :_reduce_3,
  2, 25, :_reduce_4,
  0, 26, :_reduce_5,
  2, 26, :_reduce_6,
  4, 26, :_reduce_7,
  3, 26, :_reduce_8,
  3, 26, :_reduce_9,
  4, 26, :_reduce_10,
  4, 26, :_reduce_11,
  5, 26, :_reduce_12,
  2, 26, :_reduce_13,
  3, 26, :_reduce_14,
  3, 26, :_reduce_15,
  4, 26, :_reduce_16,
  3, 26, :_reduce_17,
  3, 26, :_reduce_18,
  4, 26, :_reduce_19,
  4, 26, :_reduce_20,
  3, 26, :_reduce_21,
  2, 27, :_reduce_22,
  2, 27, :_reduce_23,
  3, 27, :_reduce_24,
  3, 27, :_reduce_25,
  3, 30, :_reduce_26,
  3, 30, :_reduce_27,
  1, 30, :_reduce_none,
  3, 29, :_reduce_29,
  3, 29, :_reduce_30,
  1, 29, :_reduce_none,
  2, 28, :_reduce_32,
  2, 28, :_reduce_33,
  1, 28, :_reduce_none,
  3, 31, :_reduce_35,
  1, 31, :_reduce_36 ]

racc_reduce_n = 37

racc_shift_n = 74

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :K => 3,
  :R => 4,
  :H => 5,
  :O => 6,
  :G => 7,
  :F => 8,
  :S => 9,
  :T => 10,
  :PLUS => 11,
  :MINUS => 12,
  :ASTERISK => 13,
  :SLASH => 14,
  :PARENL => 15,
  :PARENR => 16,
  :BRACKETL => 17,
  :BRACKETR => 18,
  :AT => 19,
  :SHARP => 20,
  :DOLLAR => 21,
  :TILDE => 22 }

racc_nt_base = 23

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "K",
  "R",
  "H",
  "O",
  "G",
  "F",
  "S",
  "T",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "BRACKETL",
  "BRACKETR",
  "AT",
  "SHARP",
  "DOLLAR",
  "TILDE",
  "$start",
  "expr",
  "rate",
  "option",
  "modifier",
  "unary",
  "mul",
  "add",
  "term" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
          rate, option = val
          modifier = option.modifier || Arithmetic::Node::Number.new(0)
          result = parsed(rate, modifier.eval(@round_type), option)

    result
end

def _reduce_2(val, _values, result)
          _, rate, option = val
          raise ParseError if option.modifier_after_one_and_a_half
          option.modifier_after_half ||= Arithmetic::Node::Number.new(0)
          modifier = option.modifier || Arithmetic::Node::Number.new(0)
          result = parsed(rate, modifier.eval(@round_type), option)

    result
end

def _reduce_3(val, _values, result)
          _, _, rate, option = val
          raise ParseError if option.modifier_after_half
          option.modifier_after_one_and_a_half ||= Arithmetic::Node::Number.new(0)
          modifier = option.modifier || Arithmetic::Node::Number.new(0)
          result = parsed(rate, modifier.eval(@round_type), option)

    result
end

def _reduce_4(val, _values, result)
 result = val[1].to_i
    result
end

def _reduce_5(val, _values, result)
            result = RatingOptions.new

    result
end

def _reduce_6(val, _values, result)
            option, term = val
            raise ParseError unless option.modifier.nil?

            option.modifier = term
            result = option

    result
end

def _reduce_7(val, _values, result)
            option, _, term, _ = val
            raise ParseError unless option.critical.nil?

            option.critical = term
            result = option

    result
end

def _reduce_8(val, _values, result)
            option, _, term = val
            raise ParseError unless option.critical.nil?

            option.critical = term
            result = option

    result
end

def _reduce_9(val, _values, result)
            option, _, term = val
            raise ParseError unless option.settable_first_roll_adjust_option?

            option.first_to = term.to_i
            result = option

    result
end

def _reduce_10(val, _values, result)
            option, _, _, term = val
            raise ParseError unless option.settable_first_roll_adjust_option?

            option.first_modify = term.to_i
            result = option

    result
end

def _reduce_11(val, _values, result)
            option, _, _, term = val
            raise ParseError unless option.settable_first_roll_adjust_option?

            option.first_modify = -(term.to_i)
            result = option

    result
end

def _reduce_12(val, _values, result)
            option, _, _, _, term = val
            raise ParseError unless @version == :v2_5 && option.settable_first_roll_adjust_option?

            option.first_modify_ssp = term.to_i
            result = option

    result
end

def _reduce_13(val, _values, result)
            option, _ = val
            raise ParseError unless option.modifier_after_half.nil?

            option.modifier_after_half = Arithmetic::Node::Number.new(0)
            result = option

    result
end

def _reduce_14(val, _values, result)
            option, _, term = val
            raise ParseError unless option.modifier_after_half.nil?

            option.modifier_after_half = term
            result = option

    result
end

def _reduce_15(val, _values, result)
            option, _, _ = val
            raise ParseError if option.modifier_after_one_and_a_half

            option.modifier_after_one_and_a_half = Arithmetic::Node::Number.new(0)
            result = option

    result
end

def _reduce_16(val, _values, result)
            option, _, _, term = val
            raise ParseError if option.modifier_after_one_and_a_half

            option.modifier_after_one_and_a_half = term
            result = option

    result
end

def _reduce_17(val, _values, result)
            option, _, term = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option.rateup.nil?

            option.rateup = term
            result = option

    result
end

def _reduce_18(val, _values, result)
            option, _, _ = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option.settable_non_2d_roll_option?

            option.greatest_fortune = true
            result = option

    result
end

def _reduce_19(val, _values, result)
            option, _, _, term = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option.settable_non_2d_roll_option?

            option.semi_fixed_val = term.to_i
            result = option

    result
end

def _reduce_20(val, _values, result)
            option, _, _, term = val
            raise ParseError unless [:v2_5, :v2_0].include?(@version) && option.settable_non_2d_roll_option?

            option.tmp_fixed_val = term.to_i
            result = option

    result
end

def _reduce_21(val, _values, result)
            option, _, term = val
            raise ParseError unless @version == :v2_5 && option.kept_modify.nil?

            option.kept_modify = term
            result = option

    result
end

def _reduce_22(val, _values, result)
 result = val[1]
    result
end

def _reduce_23(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

def _reduce_24(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_25(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

def _reduce_26(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_27(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

# reduce 28 omitted

def _reduce_29(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])
    result
end

def _reduce_30(val, _values, result)
         result = Arithmetic::Node::DivideWithGameSystemDefault.new(val[0], val[2])

    result
end

# reduce 31 omitted

def _reduce_32(val, _values, result)
 result = val[1]
    result
end

def _reduce_33(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

# reduce 34 omitted

def _reduce_35(val, _values, result)
 result = val[1]
    result
end

def _reduce_36(val, _values, result)
 result = Arithmetic::Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RatingParser

    end
  end
end
