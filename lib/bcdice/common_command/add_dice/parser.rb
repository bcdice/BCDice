#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'


require "bcdice/common_command/lexer"
require "bcdice/common_command/add_dice/node"

module BCDice
  module CommonCommand
    module AddDice
      class Parser < Racc::Parser


def self.parse(source)
  new.parse(source)
end

def parse(source)
  @lexer = Lexer.new(source)
  do_parse()
rescue ParseError
  nil
end

private

def next_token
  @lexer.next_token
end

# 加減算の右辺が負数である場合に加減算を逆転させる
def expand_negate(op, rhs)
  if rhs.is_a?(Node::Negate)
    if op == :+
      return [:-, rhs.body]
    elsif op == :-
      return [:+, rhs.body]
    end
  end

  [op, rhs]
end
##### State transition tables begin ###

racc_action_table = [
    14,    14,    50,    12,    51,    19,    20,    14,    14,    14,
    12,     3,    12,    17,    18,    14,     8,     9,    12,     4,
    13,    13,    28,     8,     9,     8,     9,    13,    13,    13,
    14,     8,     9,    12,    15,    13,    14,    23,    14,    12,
    56,    12,    19,    20,    57,    14,     8,     9,    12,   nil,
    13,   nil,     8,     9,     8,     9,    13,    14,    13,   nil,
    12,     8,     9,    14,    16,    13,   -27,   -27,    19,    20,
   -27,    17,    18,     8,     9,   nil,    42,    13,   nil,    17,
    18,    40,    39,    13,   nil,    38,   -28,   -28,    40,    39,
   -28,   nil,    38,    45,    47,    44,    46,    52,    53,    54,
    55 ]

racc_action_check = [
    16,    12,    38,    16,    38,     6,     6,     2,    36,     8,
     2,     0,     8,    27,    27,     9,    16,    16,     9,     1,
    16,    12,    16,     2,     2,     8,     8,     2,    36,     8,
    13,     9,     9,    13,     4,     9,    17,    11,    18,    17,
    50,    18,    29,    29,    51,    19,    13,    13,    19,   nil,
    13,   nil,    17,    17,    18,    18,    17,    20,    18,   nil,
    20,    19,    19,    23,     5,    19,    23,    23,    30,    30,
    23,    25,    25,    20,    20,   nil,    25,    20,   nil,     5,
     5,    24,    24,    23,   nil,    24,    33,    33,    34,    34,
    33,   nil,    34,    32,    32,    32,    32,    39,    39,    40,
    40 ]

racc_action_pointer = [
     7,    19,     5,   nil,    34,    61,   -15,   nil,     7,    13,
   nil,    32,    -1,    28,   nil,   nil,    -2,    34,    36,    43,
    55,   nil,   nil,    61,    76,    53,   nil,    -5,   nil,    22,
    48,   nil,    79,    81,    83,   nil,     6,   nil,    -8,    90,
    92,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    29,    31,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,   -41,   -41,    -4,   -41,    -1,    -9,   -12,   -41,   -41,
   -20,   -26,   -41,   -41,   -40,    58,   -41,   -41,   -41,   -41,
   -41,   -18,   -19,   -22,   -24,   -41,    -2,    -5,    -6,    -7,
    -8,   -10,   -13,   -21,   -41,   -25,   -37,   -30,   -41,   -41,
   -41,   -38,   -39,   -11,   -14,   -15,   -16,   -17,   -23,   -29,
   -41,   -41,   -33,   -34,   -35,   -36,   -31,   -32 ]

racc_goto_table = [
    24,     5,    21,    22,    29,    30,    35,     1,     2,    26,
    43,    33,    25,    31,    32,    27,    48,    34,   nil,   nil,
   nil,   nil,   nil,   nil,    49 ]

racc_goto_check = [
     9,     3,     6,     6,     5,     5,    11,     1,     2,     4,
     7,     9,     3,     6,     6,     3,    11,    10,   nil,   nil,
   nil,   nil,   nil,   nil,     9 ]

racc_goto_pointer = [
   nil,     7,     8,    -1,    -7,   -13,    -6,   -22,   nil,   -12,
    -6,   -18,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     6,     7,   nil,    10,    11,
   nil,   nil,    36,    37,    41 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 26, :_reduce_1,
  4, 26, :_reduce_2,
  0, 27, :_reduce_3,
  1, 27, :_reduce_4,
  1, 29, :_reduce_none,
  1, 29, :_reduce_6,
  3, 28, :_reduce_7,
  3, 28, :_reduce_8,
  1, 28, :_reduce_none,
  3, 30, :_reduce_10,
  4, 30, :_reduce_11,
  1, 30, :_reduce_none,
  0, 32, :_reduce_13,
  1, 32, :_reduce_14,
  1, 32, :_reduce_15,
  1, 32, :_reduce_16,
  1, 32, :_reduce_17,
  2, 31, :_reduce_18,
  2, 31, :_reduce_19,
  1, 31, :_reduce_none,
  3, 33, :_reduce_21,
  2, 33, :_reduce_22,
  4, 33, :_reduce_23,
  2, 33, :_reduce_24,
  3, 33, :_reduce_25,
  1, 33, :_reduce_none,
  0, 35, :_reduce_27,
  1, 35, :_reduce_28,
  2, 36, :_reduce_29,
  1, 36, :_reduce_30,
  3, 39, :_reduce_31,
  3, 39, :_reduce_32,
  2, 37, :_reduce_33,
  2, 37, :_reduce_34,
  2, 37, :_reduce_35,
  2, 37, :_reduce_36,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  3, 34, :_reduce_39,
  1, 34, :_reduce_40 ]

racc_reduce_n = 41

racc_shift_n = 58

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :CMP_OP => 3,
  :S => 4,
  :D => 5,
  :K => 6,
  :H => 7,
  :L => 8,
  :M => 9,
  :A => 10,
  :X => 11,
  :I => 12,
  :N => 13,
  :U => 14,
  :R => 15,
  :F => 16,
  :C => 17,
  :PLUS => 18,
  :MINUS => 19,
  :ASTERISK => 20,
  :SLASH => 21,
  :PARENL => 22,
  :PARENR => 23,
  :QUESTION => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "CMP_OP",
  "S",
  "D",
  "K",
  "H",
  "L",
  "M",
  "A",
  "X",
  "I",
  "N",
  "U",
  "R",
  "F",
  "C",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "QUESTION",
  "$start",
  "command",
  "secret",
  "add",
  "target",
  "mul",
  "unary",
  "round_type",
  "dice",
  "term",
  "explicit_or_implicit_sides",
  "filter",
  "filter_type",
  "filter_type_with_shorthand",
  "filter_shorthand" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
           secret, lhs = val
           raise ParseError unless lhs.include_dice?

           result = Node::Command.new(secret, lhs)

    result
end

def _reduce_2(val, _values, result)
           secret, lhs, cmp_op, rhs = val
           raise ParseError if !lhs.include_dice? || rhs.include_dice? || cmp_op.nil?

           result = Node::Command.new(secret, lhs, cmp_op, rhs)

    result
end

def _reduce_3(val, _values, result)
 result = false
    result
end

def _reduce_4(val, _values, result)
 result = true
    result
end

# reduce 5 omitted

def _reduce_6(val, _values, result)
 result = Node::UndecidedTarget.instance
    result
end

def _reduce_7(val, _values, result)
      lhs = val[0]
      op, rhs = expand_negate(:+, val[2])
      result = Node::BinaryOp.new(lhs, op, rhs)

    result
end

def _reduce_8(val, _values, result)
      lhs = val[0]
      op, rhs = expand_negate(:-, val[2])
      result = Node::BinaryOp.new(lhs, op, rhs)

    result
end

# reduce 9 omitted

def _reduce_10(val, _values, result)
      lhs = val[0]
      rhs = val[2]
      result = Node::BinaryOp.new(lhs, :*, rhs)

    result
end

def _reduce_11(val, _values, result)
       lhs = val[0]
       rhs = val[2]
       divied_class = val[3]
       result = divied_class.new(lhs, rhs)

    result
end

# reduce 12 omitted

def _reduce_13(val, _values, result)
 result = Node::DivideWithGameSystemDefault
    result
end

def _reduce_14(val, _values, result)
 result = Node::DivideWithRoundingDown
    result
end

def _reduce_15(val, _values, result)
 result = Node::DivideWithRoundingUp
    result
end

def _reduce_16(val, _values, result)
 result = Node::DivideWithRoundingUp
    result
end

def _reduce_17(val, _values, result)
 result = Node::DivideWithRoundingOff
    result
end

def _reduce_18(val, _values, result)
 result = val[1]
    result
end

def _reduce_19(val, _values, result)
         body = val[1]
         result = body.is_a?(Node::Negate) ? body.body : Node::Negate.new(body)

    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
        times = val[0]
        sides = val[2]
        raise ParseError if times.include_dice? || sides.include_dice?

        result = Node::DiceRoll.new(times, sides)

    result
end

def _reduce_22(val, _values, result)
        times = val[0]
        raise ParseError if times.include_dice?

        result = Node::ImplicitSidesDiceRoll.new(times)

    result
end

def _reduce_23(val, _values, result)
        times = val[0]
        sides = val[2]
        filter = val[3][:filter]
        n_filtering = val[3][:n_filtering]

        raise ParseError if sides != :implicit && sides.include_dice?
        raise ParseError if times.include_dice? || n_filtering.include_dice?

        result = Node::DiceRollWithFilter.new(times, sides, n_filtering, filter)

    result
end

def _reduce_24(val, _values, result)
        times = Node::Number.new(1)
        sides = val[1]
        raise ParseError if sides.include_dice?
        raise ParseError if sides.instance_of?(Node::Number) && sides.literal == 66

        result = Node::DiceRoll.new(times, sides)

    result
end

def _reduce_25(val, _values, result)
        times = Node::Number.new(1)
        sides = val[1]
        filter = val[2][:filter]
        n_filtering = val[2][:n_filtering]

        raise ParseError if sides != :implicit && sides.include_dice?
        raise ParseError if n_filtering.include_dice?
        raise ParseError if sides.instance_of?(Node::Number) && sides.literal == 66

        result = Node::DiceRollWithFilter.new(times, sides, n_filtering, filter)

    result
end

# reduce 26 omitted

def _reduce_27(val, _values, result)
 result = :implicit
    result
end

def _reduce_28(val, _values, result)
 result = val[0]
    result
end

def _reduce_29(val, _values, result)
 result = {filter: val[0], n_filtering: val[1]}
    result
end

def _reduce_30(val, _values, result)
 result = {filter: val[0], n_filtering: Node::Number.new(1)}
    result
end

def _reduce_31(val, _values, result)
 result = Node::DiceRollWithFilter::KEEP_HIGHEST
    result
end

def _reduce_32(val, _values, result)
 result = Node::DiceRollWithFilter::KEEP_LOWEST
    result
end

def _reduce_33(val, _values, result)
 result = Node::DiceRollWithFilter::KEEP_HIGHEST
    result
end

def _reduce_34(val, _values, result)
 result = Node::DiceRollWithFilter::KEEP_LOWEST
    result
end

def _reduce_35(val, _values, result)
 result = Node::DiceRollWithFilter::DROP_HIGHEST
    result
end

def _reduce_36(val, _values, result)
 result = Node::DiceRollWithFilter::DROP_LOWEST
    result
end

# reduce 37 omitted

# reduce 38 omitted

def _reduce_39(val, _values, result)
 result = Node::Parenthesis.new(val[1])
    result
end

def _reduce_40(val, _values, result)
 result = Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
    end   # module AddDice
  end   # module CommonCommand
end   # module BCDice
