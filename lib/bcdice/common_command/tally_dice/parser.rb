#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'


require "bcdice/common_command/lexer"
require "bcdice/common_command/tally_dice/node"
require "bcdice/arithmetic/node"

module BCDice
  module CommonCommand
    module TallyDice
      class Parser < Racc::Parser


def self.parse(source)
  new.parse(source)
end

def parse(source)
  @lexer = Lexer.new(source)
  do_parse()
rescue ParseError
  nil
end

private

def next_token
  @lexer.next_token
end
##### State transition tables begin ###

racc_action_table = [
     8,     8,    18,    19,    20,    21,     8,     8,     8,    22,
    14,    15,     3,     7,     7,    14,    15,    14,    15,     7,
     7,     7,     8,     4,     8,    35,    33,    34,    36,     8,
     9,    14,    15,    14,    15,     7,     8,     7,    14,    15,
    23,    24,     7,    23,    24,    14,    15,    23,    24,     7,
    10 ]

racc_action_check = [
     2,     7,    10,    10,    11,    11,    14,    17,    15,    11,
     7,     7,     0,     2,     7,    14,    14,    15,    15,    14,
    17,    15,    20,     1,    21,    31,    31,    31,    31,    23,
     4,    20,    20,    21,    21,    20,    24,    21,    23,    23,
    12,    12,    23,    28,    28,    24,    24,    29,    29,    24,
     6 ]

racc_action_pointer = [
     2,    23,    -2,   nil,    30,   nil,    47,    -1,   nil,   nil,
    -2,    -7,    27,   nil,     4,     6,   nil,     5,   nil,   nil,
    20,    22,   nil,    27,    34,   nil,   nil,   nil,    30,    34,
   nil,    19,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -23,   -23,    -3,   -23,    -1,   -23,   -23,   -22,    37,
   -23,   -23,    -9,   -12,   -23,   -23,   -20,   -23,    -5,    -6,
   -23,   -23,   -21,   -23,   -23,   -18,   -19,    -4,    -7,    -8,
   -10,   -13,   -11,   -14,   -15,   -16,   -17 ]

racc_goto_table = [
     6,    25,    26,    12,     1,     2,     5,    17,    11,    32,
    30,    31,   nil,   nil,   nil,    27,    28,    29 ]

racc_goto_check = [
     4,     8,     8,     7,     1,     2,     3,     5,     6,     9,
     8,     8,   nil,   nil,   nil,     4,     7,     7 ]

racc_goto_pointer = [
   nil,     4,     5,     4,    -2,    -3,     1,    -4,   -13,   -22 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,    13,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 18, :_reduce_1,
  0, 19, :_reduce_2,
  1, 19, :_reduce_3,
  4, 20, :_reduce_4,
  1, 22, :_reduce_5,
  1, 22, :_reduce_6,
  3, 23, :_reduce_7,
  3, 23, :_reduce_8,
  1, 23, :_reduce_none,
  3, 24, :_reduce_10,
  4, 24, :_reduce_11,
  1, 24, :_reduce_none,
  0, 26, :_reduce_13,
  1, 26, :_reduce_14,
  1, 26, :_reduce_15,
  1, 26, :_reduce_16,
  1, 26, :_reduce_17,
  2, 25, :_reduce_18,
  2, 25, :_reduce_19,
  1, 25, :_reduce_none,
  3, 21, :_reduce_21,
  1, 21, :_reduce_22 ]

racc_reduce_n = 23

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :T => 3,
  :Y => 4,
  :Z => 5,
  :R => 6,
  :U => 7,
  :C => 8,
  :F => 9,
  :S => 10,
  :PLUS => 11,
  :MINUS => 12,
  :ASTERISK => 13,
  :SLASH => 14,
  :PARENL => 15,
  :PARENR => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "T",
  "Y",
  "Z",
  "R",
  "U",
  "C",
  "F",
  "S",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "$start",
  "expr",
  "secret",
  "notation",
  "term",
  "show_zeros",
  "add",
  "mul",
  "unary",
  "round_type" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
          result = Node::Command.new(
            secret: val[0],
            notation: val[1]
          )

    result
end

def _reduce_2(val, _values, result)
 result = false
    result
end

def _reduce_3(val, _values, result)
 result = true
    result
end

def _reduce_4(val, _values, result)
              result = Node::Notation.new(
                times: val[0],
                sides: val[3],
                show_zeros: val[2]
              )

    result
end

def _reduce_5(val, _values, result)
 result = false
    result
end

def _reduce_6(val, _values, result)
 result = true
    result
end

def _reduce_7(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_8(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

# reduce 9 omitted

def _reduce_10(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])
    result
end

def _reduce_11(val, _values, result)
         divied_class = val[3]
         result = divied_class.new(val[0], val[2])

    result
end

# reduce 12 omitted

def _reduce_13(val, _values, result)
 result = Arithmetic::Node::DivideWithGameSystemDefault
    result
end

def _reduce_14(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_15(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_16(val, _values, result)
 result = Arithmetic::Node::DivideWithRound
    result
end

def _reduce_17(val, _values, result)
 result = Arithmetic::Node::DivideWithFloor
    result
end

def _reduce_18(val, _values, result)
 result = val[1]
    result
end

def _reduce_19(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

# reduce 20 omitted

def _reduce_21(val, _values, result)
 result = val[1]
    result
end

def _reduce_22(val, _values, result)
 result = Arithmetic::Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
    end   # module TallyDice
  end   # module CommonCommand
end   # module BCDice
