#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.7.3
# from Racc grammar file "parser.y".
#

require 'racc/parser.rb'


require "bcdice/common_command/lexer"
require "bcdice/common_command/reroll_dice/node"
require "bcdice/arithmetic/node"

module BCDice
  module CommonCommand
    module BarabaraDice
      class Parser < Racc::Parser


def self.parse(source)
  new.parse(source)
end

def parse(source)
  @lexer = Lexer.new(source)
  do_parse()
rescue ParseError
  nil
end

private

def next_token
  @lexer.next_token
end
##### State transition tables begin ###

racc_action_table = [
    13,     9,     3,     9,    24,    25,     9,     9,     9,    26,
    18,    19,     8,    12,     8,    18,    19,     8,     8,     8,
     9,     4,     9,    38,    36,    37,    39,    18,    19,    18,
    19,     8,     9,     8,     9,    27,    28,    24,    25,    18,
    19,    18,    19,     8,     9,     8,     9,    27,    28,    27,
    28,    18,    19,    18,    19,     8,    10,     8,    14 ]

racc_action_check = [
     5,     2,     0,     8,    15,    15,    13,    14,    12,    15,
     8,     8,     2,     5,     8,    12,    12,    13,    14,    12,
    18,     1,    19,    34,    34,    34,    34,    18,    18,    19,
    19,    18,    24,    19,    25,    16,    16,    21,    21,    24,
    24,    25,    25,    24,    27,    25,    28,    31,    31,    32,
    32,    27,    27,    28,    28,    27,     4,    28,     7 ]

racc_action_pointer = [
    -6,    21,    -1,   nil,    56,    -9,   nil,    55,     1,   nil,
   nil,   nil,     6,     4,     5,    -5,    24,   nil,    18,    20,
   nil,    28,   nil,   nil,    30,    32,   nil,    42,    44,   nil,
   nil,    36,    38,   nil,    19,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -25,   -25,    -3,   -25,    -4,    -7,   -25,   -25,   -24,
    40,    -1,   -25,   -25,   -25,   -25,   -11,   -14,   -25,   -25,
   -22,    -5,    -6,    -8,   -25,   -25,   -23,   -25,   -25,   -20,
   -21,    -9,   -10,   -12,   -15,   -13,   -16,   -17,   -18,   -19 ]

racc_goto_table = [
     7,     1,     6,    15,     2,    29,    30,    21,    31,    32,
     5,     7,    23,    22,    33,    34,    11,    35 ]

racc_goto_check = [
     7,     1,     6,     5,     2,     9,     9,     5,     8,     8,
     3,     7,     7,     6,     9,     9,     4,    10 ]

racc_goto_pointer = [
   nil,     1,     4,     8,    11,    -5,     0,    -2,   -16,   -13,
   -17 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,    16,    17,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 24, :_reduce_1,
  0, 25, :_reduce_2,
  1, 25, :_reduce_3,
  0, 27, :_reduce_4,
  2, 27, :_reduce_5,
  3, 26, :_reduce_6,
  1, 26, :_reduce_7,
  3, 29, :_reduce_8,
  3, 28, :_reduce_9,
  3, 28, :_reduce_10,
  1, 28, :_reduce_none,
  3, 31, :_reduce_12,
  4, 31, :_reduce_13,
  1, 31, :_reduce_none,
  0, 33, :_reduce_15,
  1, 33, :_reduce_16,
  1, 33, :_reduce_17,
  1, 33, :_reduce_18,
  1, 33, :_reduce_19,
  2, 32, :_reduce_20,
  2, 32, :_reduce_21,
  1, 32, :_reduce_none,
  3, 30, :_reduce_23,
  1, 30, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 40

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :B => 3,
  :R => 4,
  :U => 5,
  :C => 6,
  :F => 7,
  :S => 8,
  :PLUS => 9,
  :MINUS => 10,
  :ASTERISK => 11,
  :SLASH => 12,
  :PARENL => 13,
  :PARENR => 14,
  :BRACKETL => 15,
  :BRACKETR => 16,
  :LESS => 17,
  :GREATER => 18,
  :EQUAL => 19,
  :NOT => 20,
  :AT => 21,
  :CMP_OP => 22 }

racc_nt_base = 23

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "B",
  "R",
  "U",
  "C",
  "F",
  "S",
  "PLUS",
  "MINUS",
  "ASTERISK",
  "SLASH",
  "PARENL",
  "PARENR",
  "BRACKETL",
  "BRACKETR",
  "LESS",
  "GREATER",
  "EQUAL",
  "NOT",
  "AT",
  "CMP_OP",
  "$start",
  "expr",
  "secret",
  "notations",
  "target",
  "add",
  "dice",
  "term",
  "mul",
  "unary",
  "round_type" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
          result = Node::Command.new(
            secret: val[0],
            notations: val[1],
            cmp_op: val[2][:cmp_op],
            target_number: val[2][:target]
          )

    result
end

def _reduce_2(val, _values, result)
 result = false
    result
end

def _reduce_3(val, _values, result)
 result = true
    result
end

def _reduce_4(val, _values, result)
 result = {}
    result
end

def _reduce_5(val, _values, result)
            cmp_op, target = val
            raise ParseError unless cmp_op

            result = {cmp_op: cmp_op, target: target}

    result
end

def _reduce_6(val, _values, result)
               notations = val[0]
               notations.push(val[2])
               result = notations

    result
end

def _reduce_7(val, _values, result)
 result = [val[0]]
    result
end

def _reduce_8(val, _values, result)
          times = val[0]
          sides = val[2]
          result = Node::Notation.new(times, sides)

    result
end

def _reduce_9(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :+, val[2])
    result
end

def _reduce_10(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :-, val[2])
    result
end

# reduce 11 omitted

def _reduce_12(val, _values, result)
 result = Arithmetic::Node::BinaryOp.new(val[0], :*, val[2])
    result
end

def _reduce_13(val, _values, result)
         divied_class = val[3]
         result = divied_class.new(val[0], val[2])

    result
end

# reduce 14 omitted

def _reduce_15(val, _values, result)
 result = Arithmetic::Node::DivideWithGameSystemDefault
    result
end

def _reduce_16(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_17(val, _values, result)
 result = Arithmetic::Node::DivideWithCeil
    result
end

def _reduce_18(val, _values, result)
 result = Arithmetic::Node::DivideWithRound
    result
end

def _reduce_19(val, _values, result)
 result = Arithmetic::Node::DivideWithFloor
    result
end

def _reduce_20(val, _values, result)
 result = val[1]
    result
end

def _reduce_21(val, _values, result)
 result = Arithmetic::Node::Negative.new(val[1])
    result
end

# reduce 22 omitted

def _reduce_23(val, _values, result)
 result = val[1]
    result
end

def _reduce_24(val, _values, result)
 result = Arithmetic::Node::Number.new(val[0])
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
    end   # module BarabaraDice
  end   # module CommonCommand
end   # module BCDice
