input:
2CL 通常
output:
OracleEngine : (2CL) ＞ [1, 3] ＞ シフト3
rand:3/6,1/6
============================
input:
2cl6
output:
OracleEngine : (2CL) ＞ [1, 3] ＞ シフト3
rand:3/6,1/6
============================
input:
2cL7
output:
OracleEngine : (2CL7) ＞ [1, 3] ＞ シフト3
rand:3/6,1/6
============================
input:
10Cl
output:
OracleEngine : (10CL) ＞ [2, 2, 4, 4, 5, 5, 6, 6, 6, 6] ＞ シフト6
rand:6/6,5/6,6/6,4/6,2/6,6/6,2/6,5/6,4/6,6/6
============================
input:
10Cl6
output:
OracleEngine : (10CL) ＞ [2, 2, 4, 4, 5, 5, 6, 6, 6, 6] ＞ シフト6
rand:6/6,5/6,6/6,4/6,2/6,6/6,2/6,5/6,4/6,6/6
============================
input:
10Cl7
output:
OracleEngine : (10CL7) ＞ [2, 2, 4, 4, 5, 5, 6, 6, 6, 6] ＞ シフト6
rand:6/6,5/6,6/6,4/6,2/6,6/6,2/6,5/6,4/6,6/6
============================
input:
1CL+1 足し算
output:
OracleEngine : (1CL+1) ＞ [2] ＞ シフト2
rand:1/6
============================
input:
1CL+1
output:
OracleEngine : (1CL+1) ＞ [6] ＞ シフト6
rand:6/6
============================
input:
1CL6+1
output:
OracleEngine : (1CL+1) ＞ [6] ＞ シフト6
rand:6/6
============================
input:
1CL7+1
output:
OracleEngine : (1CL7+1) ＞ [7] ＞ シフト7
rand:6/6
============================
input:
1CL7+1
output:
OracleEngine : (1CL7+1) ＞ [3] ＞ シフト3
rand:2/6
============================
input:
1CL7+1+2+0
output:
OracleEngine : (1CL7+3) ＞ [5] ＞ シフト5
rand:2/6
============================
input:
1CL7+0
output:
OracleEngine : (1CL7) ＞ [4] ＞ シフト4
rand:4/6
============================
input:
3cl-1 引き算
output:
OracleEngine : (3CL-1) ＞ [1, 1, 2] ＞ シフト2
rand:1/6,2/6,3/6
============================
input:
3cl-1
output:
OracleEngine : (3CL-1) ＞ [1, 2, 4] ＞ シフト4
rand:5/6,2/6,3/6
============================
input:
3Cl6-1
output:
OracleEngine : (3CL-1) ＞ [1, 1, 1] ＞ シフト1
rand:1/6,1/6,1/6
============================
input:
3CL-1-2-0
output:
OracleEngine : (3CL-3) ＞ [1, 1, 3] ＞ シフト3
rand:6/6,2/6,4/6
============================
input:
3CL-0
output:
OracleEngine : (3CL) ＞ [2, 4, 5] ＞ シフト5
rand:5/6,2/6,4/6
============================
input:
4cl-1+1 足し引き 最終的に0か1項にまとめられる
output:
OracleEngine : (4CL) ＞ [1, 2, 4, 5] ＞ シフト5
rand:2/6,4/6,1/6,5/6
============================
input:
4cl7-1+2
output:
OracleEngine : (4CL7+1) ＞ [2, 3, 5, 7] ＞ シフト7
rand:2/6,4/6,1/6,6/6
============================
input:
4cl6-2+1
output:
OracleEngine : (4CL-1) ＞ [1, 1, 3, 5] ＞ シフト5
rand:2/6,4/6,1/6,6/6
============================
input:
6Cl+11-9
output:
OracleEngine : (6CL+2) ＞ [3, 6, 6, 6, 6, 6] ＞ シフト6
rand:4/6,5/6,6/6,6/6,1/6,6/6
============================
input:
6Cl7+11-9
output:
OracleEngine : (6CL7+2) ＞ [3, 6, 7, 7, 7, 7] ＞ シフト7
rand:4/6,5/6,6/6,6/6,1/6,6/6
============================
input:
8cL-12+10
output:
OracleEngine : (8CL-2) ＞ [1, 1, 1, 2, 2, 3, 4, 4] ＞ シフト4
rand:3/6,6/6,4/6,5/6,1/6,6/6,1/6,4/6
============================
input:
4cl6+0-0
output:
OracleEngine : (4CL) ＞ [1, 2, 4, 6] ＞ シフト6
rand:2/6,4/6,1/6,6/6
============================
input:
4CL6>=6 目標値付き 通常
output:
OracleEngine : (4CL>=6) ＞ [2, 3, 5, 6] ＞ 成功 シフト6
rand:3/6,2/6,6/6,5/6
============================
input:
4cL>=6
output:
OracleEngine : (4CL>=6) ＞ [1, 4, 5, 5] ＞ 失敗 シフト4
rand:5/6,1/6,4/6,5/6
============================
input:
4cL7>=6
output:
OracleEngine : (4CL7>=6) ＞ [1, 4, 5, 5] ＞ 失敗 シフト4
rand:5/6,1/6,4/6,5/6
============================
input:
4cL6>=7 1～6(7)に丸められる
output:
OracleEngine : (4CL>=6) ＞ [1, 4, 5, 5] ＞ 失敗 シフト4
rand:5/6,1/6,4/6,5/6
============================
input:
4cL7>=7
output:
OracleEngine : (4CL7>=7) ＞ [1, 4, 5, 5] ＞ 失敗 シフト4
rand:5/6,1/6,4/6,5/6
============================
input:
4cL>=0
output:
OracleEngine : (4CL>=1) ＞ [1, 4, 5, 5] ＞ 成功 シフト1
rand:5/6,1/6,4/6,5/6
============================
input:
4cL6>=0
output:
OracleEngine : (4CL>=1) ＞ [1, 4, 5, 5] ＞ 成功 シフト1
rand:5/6,1/6,4/6,5/6
============================
input:
4cL7>=0
output:
OracleEngine : (4CL7>=1) ＞ [1, 4, 5, 5] ＞ 成功 シフト1
rand:5/6,1/6,4/6,5/6
============================
input:
2CL+1>=4 目標値付き 足し算
output:
OracleEngine : (2CL+1>=4) ＞ [3, 4] ＞ 成功 シフト4
rand:3/6,2/6
============================
input:
2CL7+1>=4 成功でシフト＝＞目標値
output:
OracleEngine : (2CL7+1>=4) ＞ [3, 4] ＞ 成功 シフト4
rand:3/6,2/6
============================
input:
2CL6+1>=4
output:
OracleEngine : (2CL+1>=4) ＞ [3, 4] ＞ 成功 シフト4
rand:3/6,2/6
============================
input:
2CL+1>=4 失敗でシフト＝＞最大ダイス値-1
output:
OracleEngine : (2CL+1>=4) ＞ [2, 3] ＞ 失敗 シフト2
rand:2/6,1/6
============================
input:
2CL6+1>=4
output:
OracleEngine : (2CL+1>=4) ＞ [2, 3] ＞ 失敗 シフト2
rand:2/6,1/6
============================
input:
2CL7+1=>4 不等号は入れ替えヨシ
output:
OracleEngine : (2CL7+1>=4) ＞ [2, 3] ＞ 失敗 シフト2
rand:2/6,1/6
============================
input:
2CL+1>=12
output:
OracleEngine : (2CL+1>=6) ＞ [5, 6] ＞ 成功 シフト6
rand:4/6,6/6
============================
input:
2CL6+1>=12
output:
OracleEngine : (2CL+1>=6) ＞ [5, 6] ＞ 成功 シフト6
rand:4/6,6/6
============================
input:
2CL7+1>=12
output:
OracleEngine : (2CL7+1>=7) ＞ [5, 7] ＞ 成功 シフト7
rand:4/6,6/6
============================
input:
2CL7+1+2+0>=12
output:
OracleEngine : (2CL7+3>=7) ＞ [7, 7] ＞ 成功 シフト7
rand:4/6,6/6
============================
input:
2CL+0>=5
output:
OracleEngine : (2CL>=5) ＞ [4, 6] ＞ 成功 シフト5
rand:4/6,6/6
============================
input:
3CL-1>=5 目標値付き 引き算
output:
OracleEngine : (3CL-1>=5) ＞ [2, 3, 5] ＞ 成功 シフト5
rand:4/6,6/6,3/6
============================
input:
3CL6-1>=5
output:
OracleEngine : (3CL-1>=5) ＞ [2, 3, 3] ＞ 失敗 シフト2
rand:4/6,4/6,3/6
============================
input:
3CL6-1>=5
output:
OracleEngine : (3CL-1>=5) ＞ [1, 1, 1] ＞ 失敗 シフト1
rand:1/6,1/6,1/6
============================
input:
3CL6-0>=5
output:
OracleEngine : (3CL>=5) ＞ [1, 3, 5] ＞ 成功 シフト5
rand:5/6,1/6,3/6
============================
input:
4CL-1+1>=4 目標値付き 足し引き
output:
OracleEngine : (4CL>=4) ＞ [1, 3, 4, 6] ＞ 成功 シフト4
rand:4/6,6/6,3/6,1/6
============================
input:
4CL-1+1>=6
output:
OracleEngine : (4CL>=6) ＞ [1, 3, 4, 5] ＞ 失敗 シフト4
rand:4/6,5/6,3/6,1/6
============================
input:
4CL+1-2>=4
output:
OracleEngine : (4CL-1>=4) ＞ [1, 2, 3, 4] ＞ 成功 シフト4
rand:4/6,5/6,3/6,1/6
============================
input:
4CL-2+1>=4
output:
OracleEngine : (4CL-1>=4) ＞ [1, 2, 3, 4] ＞ 成功 シフト4
rand:4/6,5/6,3/6,1/6
============================
input:
4CL-1+2>=6
output:
OracleEngine : (4CL+1>=6) ＞ [2, 4, 5, 6] ＞ 成功 シフト6
rand:4/6,5/6,3/6,1/6
============================
input:
4CL+2-1>=6
output:
OracleEngine : (4CL+1>=6) ＞ [2, 4, 5, 6] ＞ 成功 シフト6
rand:4/6,5/6,3/6,1/6
============================
input:
4CL6-2+1>=4
output:
OracleEngine : (4CL-1>=4) ＞ [1, 2, 3, 4] ＞ 成功 シフト4
rand:4/6,5/6,3/6,1/6
============================
input:
4CL7-1+2>=6
output:
OracleEngine : (4CL7+1>=6) ＞ [2, 4, 5, 7] ＞ 成功 シフト6
rand:4/6,6/6,3/6,1/6
============================
input:
2R6 クリティカル
output:
OracleEngine : (2R6) ＞ 12[6, 6] ＞ クリティカル!
rand:6/6,6/6
============================
input:
2R6 ファンブル
output:
OracleEngine : (2R6) ＞ 2[1, 1] ＞ ファンブル!
rand:1/6,1/6
============================
input:
2R6 通常
output:
OracleEngine : (2R6) ＞ 6[2, 4] ＞ 6
rand:2/6,4/6
============================
input:
2R6 通常
output:
OracleEngine : (2R6) ＞ 6[2, 4] ＞ 6
rand:2/6,4/6
============================
input:
4r6 ダイス増加,大きい2つで達成値を出す
output:
OracleEngine : (4R6) ＞ 9[1, 2, 4, 5] ＞ 9
rand:1/6,2/6,5/6,4/6
============================
input:
4R6 クリティカル,達成値がC値以上でクリティカル
output:
OracleEngine : (4R6) ＞ 12[2, 4, 6, 6] ＞ クリティカル!
rand:2/6,4/6,6/6,6/6
============================
input:
4r6 ファンブル,達成値がF値以下でファンブル
output:
OracleEngine : (4R6) ＞ 2[1, 1, 1, 1] ＞ ファンブル!
rand:1/6,1/6,1/6,1/6
============================
input:
8r6 更にダイス増加,大きい2つで達成値を出す
output:
OracleEngine : (8R6) ＞ 11[1, 1, 2, 2, 3, 4, 5, 6] ＞ 11
rand:2/6,1/6,6/6,1/6,2/6,4/6,5/6,3/6
============================
input:
8R6 クリティカル,達成値がC値以上でクリティカル
output:
OracleEngine : (8R6) ＞ 12[2, 2, 3, 4, 4, 5, 6, 6] ＞ クリティカル!
rand:6/6,6/6,4/6,3/6,2/6,4/6,2/6,5/6
============================
input:
8r6 ファンブル,達成値がF値以下でファンブル
output:
OracleEngine : (8R6) ＞ 2[1, 1, 1, 1, 1, 1, 1, 1] ＞ ファンブル!
rand:1/6,1/6,1/6,1/6,1/6,1/6,1/6,1/6
============================
input:
4r6+1 修正付き
output:
OracleEngine : (4R6+1) ＞ 9[1, 2, 4, 5]+1 ＞ 10
rand:1/6,2/6,5/6,4/6
============================
input:
4r6-2 修正付き
output:
OracleEngine : (4R6-2) ＞ 9[1, 2, 3, 6]-2 ＞ 7
rand:1/6,2/6,6/6,3/6
============================
input:
4r6+1 修正付き クリティカルはダイスのみで判断する
output:
OracleEngine : (4R6+1) ＞ 11[1, 3, 5, 6]+1 ＞ 12
rand:3/6,1/6,5/6,6/6
============================
input:
4r6-2 修正付き ファンブルはダイスのみで判断する
output:
OracleEngine : (4R6-2) ＞ 3[1, 1, 1, 2]-2 ＞ 1
rand:1/6,1/6,1/6,2/6
============================
input:
4r6+1-2+3-4+5-6+2 修正いっぱい付き 一つにまとまる
output:
OracleEngine : (4R6-1) ＞ 10[1, 3, 4, 6]-1 ＞ 9
rand:3/6,4/6,6/6,1/6
============================
input:
4r6+16-12+28 大きい修正付き
output:
OracleEngine : (4R6+32) ＞ 10[3, 4, 4, 6]+32 ＞ 42
rand:4/6,3/6,6/6,4/6
============================
input:
4r6+1-1 修正付き 0なら消える
output:
OracleEngine : (4R6) ＞ 11[3, 5, 5, 6] ＞ 11
rand:6/6,3/6,5/6,5/6
============================
input:
4r6+0 修正付き もとから0でも消える
output:
OracleEngine : (4R6) ＞ 8[1, 2, 3, 5] ＞ 8
rand:3/6,1/6,5/6,2/6
============================
input:
4r6+1 修正付き クリティカルだと達成値関係ない
output:
OracleEngine : (4R6+1) ＞ 12[4, 5, 6, 6]+1 ＞ クリティカル!
rand:5/6,4/6,6/6,6/6
============================
input:
4r6+1 修正付き ファンブルでも達成値関係ない
output:
OracleEngine : (4R6+1) ＞ 2[1, 1, 1, 1]+1 ＞ ファンブル!
rand:1/6,1/6,1/6,1/6
============================
input:
4r6@10 C値付き
output:
OracleEngine : (4R6c[10]) ＞ 8[1, 3, 3, 5] ＞ 8
rand:3/6,1/6,3/6,5/6
============================
input:
4r6@10 C値付き C値以上のダイス合計でクリティカル
output:
OracleEngine : (4R6c[10]) ＞ 10[1, 3, 4, 6] ＞ クリティカル!
rand:3/6,1/6,4/6,6/6
============================
input:
4r6@+1 C値付き @+nで12+nになる(13以上でクリティカルしなくなる)
output:
OracleEngine : (4R6c[13]) ＞ 12[3, 6, 6, 6] ＞ 12
rand:6/6,3/6,6/6,6/6
============================
input:
4r6@-2 C値付き @-nで12-nになる(下限2)
output:
OracleEngine : (4R6c[10]) ＞ 10[1, 4, 4, 6] ＞ クリティカル!
rand:1/6,6/6,4/6,4/6
============================
input:
4r6@-99 C値付き @-nで12-nになる(下限2)
output:
OracleEngine : (4R6c[2]) ＞ 3[1, 1, 1, 2] ＞ クリティカル!
rand:1/6,1/6,1/6,2/6
============================
input:
4r6@1 C値付き @-nで12-nになる(下限2)
output:
OracleEngine : (4R6c[2]) ＞ 3[1, 1, 1, 2] ＞ クリティカル!
rand:1/6,1/6,1/6,2/6
============================
input:
4r6#4 F値付き
output:
OracleEngine : (4R6f[4]) ＞ 7[1, 1, 2, 5] ＞ 7
rand:1/6,2/6,1/6,5/6
============================
input:
4r6#4 修正付き F値以下のダイス合計でファンブル
output:
OracleEngine : (4R6f[4]) ＞ 4[1, 2, 2, 2] ＞ ファンブル!
rand:2/6,2/6,1/6,2/6
============================
input:
4r6#+2 F値付き #+nで2+nになる(上限12)
output:
OracleEngine : (4R6f[4]) ＞ 4[1, 1, 1, 3] ＞ ファンブル!
rand:1/6,3/6,1/6,1/6
============================
input:
4r6#+99 F値付き #+nで2+nになる(上限12)
output:
OracleEngine : (4R6f[12]) ＞ 10[2, 4, 4, 6] ＞ ファンブル!
rand:4/6,4/6,6/6,2/6
============================
input:
4r6#13 F値付き #+nで2+nになる(上限12)
output:
OracleEngine : (4R6f[12]) ＞ 12[4, 4, 6, 6] ＞ ファンブル!
rand:4/6,4/6,6/6,6/6
============================
input:
4r6#-1 F値付き #-nで2-nになる(下限0)
output:
OracleEngine : (4R6f[1]) ＞ 2[1, 1, 1, 1] ＞ 2
rand:1/6,1/6,1/6,1/6
============================
input:
4r6#-99 F値付き #-nで2-nになる(下限0)
output:
OracleEngine : (4R6f[0]) ＞ 2[1, 1, 1, 1] ＞ 2
rand:1/6,1/6,1/6,1/6
============================
input:
4r6#-3 F値付き #-nで2-nになる(下限0)
output:
OracleEngine : (4R6f[0]) ＞ 2[1, 1, 1, 1] ＞ 2
rand:1/6,1/6,1/6,1/6
============================
input:
4r6@7#10 C値F値付き C値以上F値以下でファンブル
output:
OracleEngine : (4R6c[7]f[10]) ＞ 9[1, 3, 4, 5] ＞ ファンブル!
rand:4/6,1/6,3/6,5/6
============================
input:
4r6$1 ダイスブレイク付き(大きいダイスを取り除く)
output:
OracleEngine : (4R6b[1]) ＞ 8[1, 3, 5]×[6] ＞ 8
rand:6/6,5/6,3/6,1/6
============================
input:
4r6$3 ダイスブレイク付き 残るダイスが2個未満になることも
output:
OracleEngine : (4R6b[3]) ＞ 3[3]×[5, 5, 6] ＞ 3
rand:6/6,3/6,5/6,5/6
============================
input:
4r6$3 ダイスブレイク付き ダイスの合計がファンブル値以下ならファンブルになる
output:
OracleEngine : (4R6b[3]) ＞ 1[1]×[3, 5, 5] ＞ ファンブル!
rand:5/6,1/6,5/6,3/6
============================
input:
4r6$4 ダイスブレイク付き 残るダイスがないときも = 絶対にファンブル
output:
OracleEngine : (4R6b[4]) ＞ 0[]×[2, 4, 4, 5] ＞ ファンブル!
rand:4/6,4/6,2/6,5/6
============================
input:
4r6$6 ダイスブレイク付き
output:
OracleEngine : (4R6b[6]) ＞ 0[]×[2, 5, 6, 6] ＞ ファンブル!
rand:6/6,2/6,6/6,5/6
============================
input:
4r6$-2 ダイスブレイク付き 符号は無視される
output:
OracleEngine : (4R6b[2]) ＞ 4[2, 2]×[3, 6] ＞ 4
rand:2/6,3/6,2/6,6/6
============================
input:
4r6$+2 ダイスブレイク付き 符号は無視される
output:
OracleEngine : (4R6b[2]) ＞ 5[1, 4]×[5, 6] ＞ 5
rand:4/6,1/6,6/6,5/6
============================
input:
4r6$0 ダイスブレイク付き 0個の時
output:
OracleEngine : (4R6) ＞ 11[4, 5, 5, 6] ＞ 11
rand:6/6,4/6,5/6,5/6
============================
input:
4R6>=9 不等号付き
output:
OracleEngine : (4R6>=9) ＞ 11[2, 4, 5, 6] ＞ 11 成功
rand:4/6,5/6,6/6,2/6
============================
input:
4R6=>9 不等号付き 逆でもよい
output:
OracleEngine : (4R6>=9) ＞ 7[1, 1, 2, 5] ＞ 7 失敗
rand:2/6,5/6,1/6,1/6
============================
input:
4R6>=9 不等号付き クリティカル、ファンブルでは関係なし
output:
OracleEngine : (4R6>=9) ＞ 12[2, 4, 6, 6] ＞ クリティカル!
rand:4/6,6/6,2/6,6/6
============================
input:
4R6>=9 不等号付き クリティカル、ファンブルでは関係なし
output:
OracleEngine : (4R6>=9) ＞ 2[1, 1, 1, 1] ＞ ファンブル!
rand:1/6,1/6,1/6,1/6
============================
input:
6r6+4@9#4$2>=9 全部乗せ
output:
OracleEngine : (6R6+4c[9]f[4]b[2]>=9) ＞ 8[3, 3, 4, 4]×[5, 6]+4 ＞ 12 成功
rand:6/6,3/6,3/6,4/6,5/6,4/6
============================
input:
10R6+1@-2#3$4>=11 全部乗せ
output:
OracleEngine : (10R6+1c[10]f[3]b[4]>=11) ＞ 9[1, 2, 3, 4, 4, 5]×[6, 6, 6, 6]+1 ＞ 10 失敗
rand:5/6,6/6,4/6,6/6,2/6,1/6,6/6,4/6,6/6,3/6
============================
input:
4D6+5$1 ダメージロール ダイスブレイク付き
output:
OracleEngine : (4D6+5b[1]) ＞ 6[1, 2, 3]×[4]+5 ＞ 11
rand:3/6,1/6,4/6,2/6
============================
input:
4D6$1 ダメージロール ダイスブレイク付き(必須) ボーナスは無くてもよい
output:
OracleEngine : (4D6b[1]) ＞ 13[3, 4, 6]×[6] ＞ 13
rand:4/6,6/6,3/6,6/6
============================
input:
4D6+0$1 0指定でも消える
output:
OracleEngine : (4D6b[1]) ＞ 9[1, 3, 5]×[6] ＞ 9
rand:5/6,3/6,6/6,1/6
============================
input:
4D6+5$6 ダイス数<=ダイスブレイク で修正のみ
output:
OracleEngine : (4D6+5b[6]) ＞ 0[]×[2, 4, 6, 6]+5 ＞ 5
rand:6/6,2/6,6/6,4/6
============================
input:
4D6+5+2+3+1-4$1 修正いっぱい=>ひとまとめ
output:
OracleEngine : (4D6+7b[1]) ＞ 6[2, 2, 2]×[5]+7 ＞ 13
rand:2/6,2/6,5/6,2/6
============================
input:
4D6+5-2-3$1 修正ぴったり0で消える
output:
OracleEngine : (4D6b[1]) ＞ 9[1, 3, 5]×[6] ＞ 9
rand:5/6,3/6,1/6,6/6
============================
input:
1D6-3$2 ダイス数<=ダイスブレイク で修正のみ
output:
OracleEngine : (1D6-3b[2]) ＞ 0[]×[6]-3 ＞ 0
rand:6/6
============================
input:
1D6$2
output:
OracleEngine : (1D6b[2]) ＞ 0[]×[6] ＞ 0
rand:6/6
============================
input:
1D6$0
output:
OracleEngine : (1D6) ＞ 6[6] ＞ 6
rand:6/6
============================
input:
5d6+3$+2 ダイスブレイク 符号は無視される
output:
OracleEngine : (5D6+3b[2]) ＞ 9[2, 3, 4]×[5, 5]+3 ＞ 12
rand:5/6,2/6,3/6,5/6,4/6
============================
input:
5d6+3$-2 ダイスブレイク 符号は無視される
output:
OracleEngine : (5D6+3b[2]) ＞ 8[2, 3, 3]×[4, 4]+3 ＞ 11
rand:2/6,4/6,3/6,4/6,3/6
============================